// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: database/databaseproxy.proto

package database

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DatabaseProxy_BeginTransaction_FullMethodName    = "/dev.frndpovoa.project1.databaseproxy.proto.DatabaseProxy/BeginTransaction"
	DatabaseProxy_CommitTransaction_FullMethodName   = "/dev.frndpovoa.project1.databaseproxy.proto.DatabaseProxy/CommitTransaction"
	DatabaseProxy_RollbackTransaction_FullMethodName = "/dev.frndpovoa.project1.databaseproxy.proto.DatabaseProxy/RollbackTransaction"
	DatabaseProxy_Execute_FullMethodName             = "/dev.frndpovoa.project1.databaseproxy.proto.DatabaseProxy/Execute"
	DatabaseProxy_ExecuteTx_FullMethodName           = "/dev.frndpovoa.project1.databaseproxy.proto.DatabaseProxy/ExecuteTx"
	DatabaseProxy_Query_FullMethodName               = "/dev.frndpovoa.project1.databaseproxy.proto.DatabaseProxy/Query"
	DatabaseProxy_QueryTx_FullMethodName             = "/dev.frndpovoa.project1.databaseproxy.proto.DatabaseProxy/QueryTx"
	DatabaseProxy_Next_FullMethodName                = "/dev.frndpovoa.project1.databaseproxy.proto.DatabaseProxy/Next"
	DatabaseProxy_CloseResultSet_FullMethodName      = "/dev.frndpovoa.project1.databaseproxy.proto.DatabaseProxy/CloseResultSet"
	DatabaseProxy_CloseStatement_FullMethodName      = "/dev.frndpovoa.project1.databaseproxy.proto.DatabaseProxy/CloseStatement"
	DatabaseProxy_CloseConnection_FullMethodName     = "/dev.frndpovoa.project1.databaseproxy.proto.DatabaseProxy/CloseConnection"
)

// DatabaseProxyClient is the client API for DatabaseProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseProxyClient interface {
	BeginTransaction(ctx context.Context, in *BeginTransactionConfig, opts ...grpc.CallOption) (*Transaction, error)
	CommitTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error)
	RollbackTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error)
	Execute(ctx context.Context, in *ExecuteConfig, opts ...grpc.CallOption) (*ExecuteResult, error)
	ExecuteTx(ctx context.Context, in *ExecuteTxConfig, opts ...grpc.CallOption) (*ExecuteResult, error)
	Query(ctx context.Context, in *QueryConfig, opts ...grpc.CallOption) (*QueryResult, error)
	QueryTx(ctx context.Context, in *QueryTxConfig, opts ...grpc.CallOption) (*QueryResult, error)
	Next(ctx context.Context, in *NextConfig, opts ...grpc.CallOption) (*QueryResult, error)
	CloseResultSet(ctx context.Context, in *NextConfig, opts ...grpc.CallOption) (*Empty, error)
	CloseStatement(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CloseConnection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type databaseProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseProxyClient(cc grpc.ClientConnInterface) DatabaseProxyClient {
	return &databaseProxyClient{cc}
}

func (c *databaseProxyClient) BeginTransaction(ctx context.Context, in *BeginTransactionConfig, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, DatabaseProxy_BeginTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyClient) CommitTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, DatabaseProxy_CommitTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyClient) RollbackTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, DatabaseProxy_RollbackTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyClient) Execute(ctx context.Context, in *ExecuteConfig, opts ...grpc.CallOption) (*ExecuteResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResult)
	err := c.cc.Invoke(ctx, DatabaseProxy_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyClient) ExecuteTx(ctx context.Context, in *ExecuteTxConfig, opts ...grpc.CallOption) (*ExecuteResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResult)
	err := c.cc.Invoke(ctx, DatabaseProxy_ExecuteTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyClient) Query(ctx context.Context, in *QueryConfig, opts ...grpc.CallOption) (*QueryResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResult)
	err := c.cc.Invoke(ctx, DatabaseProxy_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyClient) QueryTx(ctx context.Context, in *QueryTxConfig, opts ...grpc.CallOption) (*QueryResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResult)
	err := c.cc.Invoke(ctx, DatabaseProxy_QueryTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyClient) Next(ctx context.Context, in *NextConfig, opts ...grpc.CallOption) (*QueryResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResult)
	err := c.cc.Invoke(ctx, DatabaseProxy_Next_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyClient) CloseResultSet(ctx context.Context, in *NextConfig, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, DatabaseProxy_CloseResultSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyClient) CloseStatement(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, DatabaseProxy_CloseStatement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseProxyClient) CloseConnection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, DatabaseProxy_CloseConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseProxyServer is the server API for DatabaseProxy service.
// All implementations must embed UnimplementedDatabaseProxyServer
// for forward compatibility.
type DatabaseProxyServer interface {
	BeginTransaction(context.Context, *BeginTransactionConfig) (*Transaction, error)
	CommitTransaction(context.Context, *Transaction) (*Transaction, error)
	RollbackTransaction(context.Context, *Transaction) (*Transaction, error)
	Execute(context.Context, *ExecuteConfig) (*ExecuteResult, error)
	ExecuteTx(context.Context, *ExecuteTxConfig) (*ExecuteResult, error)
	Query(context.Context, *QueryConfig) (*QueryResult, error)
	QueryTx(context.Context, *QueryTxConfig) (*QueryResult, error)
	Next(context.Context, *NextConfig) (*QueryResult, error)
	CloseResultSet(context.Context, *NextConfig) (*Empty, error)
	CloseStatement(context.Context, *Empty) (*Empty, error)
	CloseConnection(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedDatabaseProxyServer()
}

// UnimplementedDatabaseProxyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatabaseProxyServer struct{}

func (UnimplementedDatabaseProxyServer) BeginTransaction(context.Context, *BeginTransactionConfig) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTransaction not implemented")
}
func (UnimplementedDatabaseProxyServer) CommitTransaction(context.Context, *Transaction) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTransaction not implemented")
}
func (UnimplementedDatabaseProxyServer) RollbackTransaction(context.Context, *Transaction) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackTransaction not implemented")
}
func (UnimplementedDatabaseProxyServer) Execute(context.Context, *ExecuteConfig) (*ExecuteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedDatabaseProxyServer) ExecuteTx(context.Context, *ExecuteTxConfig) (*ExecuteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTx not implemented")
}
func (UnimplementedDatabaseProxyServer) Query(context.Context, *QueryConfig) (*QueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDatabaseProxyServer) QueryTx(context.Context, *QueryTxConfig) (*QueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTx not implemented")
}
func (UnimplementedDatabaseProxyServer) Next(context.Context, *NextConfig) (*QueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (UnimplementedDatabaseProxyServer) CloseResultSet(context.Context, *NextConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseResultSet not implemented")
}
func (UnimplementedDatabaseProxyServer) CloseStatement(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseStatement not implemented")
}
func (UnimplementedDatabaseProxyServer) CloseConnection(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseConnection not implemented")
}
func (UnimplementedDatabaseProxyServer) mustEmbedUnimplementedDatabaseProxyServer() {}
func (UnimplementedDatabaseProxyServer) testEmbeddedByValue()                       {}

// UnsafeDatabaseProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseProxyServer will
// result in compilation errors.
type UnsafeDatabaseProxyServer interface {
	mustEmbedUnimplementedDatabaseProxyServer()
}

func RegisterDatabaseProxyServer(s grpc.ServiceRegistrar, srv DatabaseProxyServer) {
	// If the following call pancis, it indicates UnimplementedDatabaseProxyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DatabaseProxy_ServiceDesc, srv)
}

func _DatabaseProxy_BeginTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginTransactionConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServer).BeginTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseProxy_BeginTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServer).BeginTransaction(ctx, req.(*BeginTransactionConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxy_CommitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServer).CommitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseProxy_CommitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServer).CommitTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxy_RollbackTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServer).RollbackTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseProxy_RollbackTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServer).RollbackTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxy_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseProxy_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServer).Execute(ctx, req.(*ExecuteConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxy_ExecuteTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTxConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServer).ExecuteTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseProxy_ExecuteTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServer).ExecuteTx(ctx, req.(*ExecuteTxConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxy_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseProxy_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServer).Query(ctx, req.(*QueryConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxy_QueryTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServer).QueryTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseProxy_QueryTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServer).QueryTx(ctx, req.(*QueryTxConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxy_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseProxy_Next_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServer).Next(ctx, req.(*NextConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxy_CloseResultSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServer).CloseResultSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseProxy_CloseResultSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServer).CloseResultSet(ctx, req.(*NextConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxy_CloseStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServer).CloseStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseProxy_CloseStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServer).CloseStatement(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseProxy_CloseConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseProxyServer).CloseConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseProxy_CloseConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseProxyServer).CloseConnection(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseProxy_ServiceDesc is the grpc.ServiceDesc for DatabaseProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.frndpovoa.project1.databaseproxy.proto.DatabaseProxy",
	HandlerType: (*DatabaseProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginTransaction",
			Handler:    _DatabaseProxy_BeginTransaction_Handler,
		},
		{
			MethodName: "CommitTransaction",
			Handler:    _DatabaseProxy_CommitTransaction_Handler,
		},
		{
			MethodName: "RollbackTransaction",
			Handler:    _DatabaseProxy_RollbackTransaction_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _DatabaseProxy_Execute_Handler,
		},
		{
			MethodName: "ExecuteTx",
			Handler:    _DatabaseProxy_ExecuteTx_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _DatabaseProxy_Query_Handler,
		},
		{
			MethodName: "QueryTx",
			Handler:    _DatabaseProxy_QueryTx_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _DatabaseProxy_Next_Handler,
		},
		{
			MethodName: "CloseResultSet",
			Handler:    _DatabaseProxy_CloseResultSet_Handler,
		},
		{
			MethodName: "CloseStatement",
			Handler:    _DatabaseProxy_CloseStatement_Handler,
		},
		{
			MethodName: "CloseConnection",
			Handler:    _DatabaseProxy_CloseConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database/databaseproxy.proto",
}
